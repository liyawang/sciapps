{
  "id": "Portcullis-1.0.0u2",
  "name": "Portcullis",
  "icon": null,
  "uuid": "2065502549470941671-242ac119-0001-005",
  "parallelism": "SERIAL",
  "defaultProcessorsPerNode": 1,
  "defaultMemoryPerNode": 1,
  "defaultNodeCount": 1,
  "defaultMaxRunTime": null,
  "defaultQueue": null,
  "version": "1.0.0",
  "revision": 2,
  "isPublic": true,
  "helpURI": "https://portcullis.readthedocs.io/en/latest/",
  "label": null,
  "owner": "rosysnake",
  "shortDescription": "PORTable CULLing of Invalid Splice junctions from pre-aligned RNA-seq data",
  "longDescription": "PORTable CULLing of Invalid Splice junctions from pre-aligned RNA-seq data",
  "tags": [
    "CyverseUK"
  ],
  "ontology": [
    "http://edamontology.org/operation_0433",
    "http://edamontology.org/operation_3680",
    "http://edamontology.org/operation_3695",
    "http://edamontology.org/topic_3047",
    "http://edamontology.org/topic_3320"
  ],
  "executionType": "CLI",
  "executionSystem": "cyverseUK-Batch2",
  "deploymentPath": "${foundation.service.apps.default.public.dir}/Portcullis-1.0.0u2.zip",
  "deploymentSystem": "data.iplantcollaborative.org",
  "templatePath": "wrapper.sh",
  "testPath": "test.sh",
  "checkpointable": false,
  "lastModified": "2017-03-23T10:55:18.000-05:00",
  "modules": [],
  "available": true,
  "inputs": [
    {
      "id": "genome",
      "value": {
        "validator": null,
        "visible": true,
        "required": true,
        "order": 0,
        "enquote": false,
        "default": ""
      },
      "details": {
        "label": "Genome FASTA file",
        "description": null,
        "argument": null,
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 1,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "bam_file",
      "value": {
        "validator": null,
        "visible": true,
        "required": true,
        "order": 0,
        "enquote": false,
        "default": [
          ""
        ]
      },
      "details": {
        "label": "sorted BAM file(s)",
        "description": null,
        "argument": null,
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 1,
        "maxCardinality": -1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "reference",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": ""
      },
      "details": {
        "label": "reference BED file",
        "description": "Reference annotation of junctions in BED format.  Any junctions found by the junction analysis tool will be preserved if found in this reference file regardless of any other filtering criteria.",
        "argument": "--reference ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    }
  ],
  "parameters": [
    {
      "id": "canonical",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": "OFF",
        "enum_values": [
          {
            "C": "Canonical junctions (GT-AG)"
          },
          {
            "S": "Semi-canonical junctions (AT-AC, or  GC-AG)"
          },
          {
            "N": "Non-canonical"
          },
          {
            "OFF": "OFF"
          }
        ]
      },
      "details": {
        "label": "canonical",
        "description": "Keep junctions based on their splice site status. OFF means, keep all junctions.  User can keep two categories.",
        "argument": "--canonical ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": -1,
        "ontology": []
      }
    },
    {
      "id": "bam_filter",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "BAM filter",
        "description": "Filter out alignments corresponding with false junctions.  Warning: this is time consuming; make sure you really want to do this first!",
        "argument": "--bam_filter ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "use_csi",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "use CSI",
        "description": "Whether to use CSI indexing rather than BAI indexing.  CSI has the advantage that it supports very long target sequences (probably not an issue unless you are working on huge genomes).  BAI has the advantage that it is more widely supported (useful for viewing in genome browsers).",
        "argument": "--use_csi ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "separate",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "separate",
        "description": "Separate spliced from unspliced reads.",
        "argument": "--separate ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "extra",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "extra",
        "description": "Calculate additional metrics that take some time to generate.  Automatically activates BAM splitting mode (--separate).",
        "argument": "--extra ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "min_cov",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 1,
        "validator": null
      },
      "details": {
        "label": "min cov",
        "description": "Only keep junctions with a number of split reads greater than or equal to this number.",
        "argument": "--min_cov ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "exon_gff",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "exon GFF",
        "description": "Output exon-based junctions in GFF format.",
        "argument": "--exon_gff ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "orientation",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": "UNKNOWN",
        "enum_values": [
          {
            "F": "Single-end forward orientation"
          },
          {
            "R": "single-end reverse orientation"
          },
          {
            "FR": "paired-end, with reads sequenced towards center of fragment -> <-.  This is usual setting for most Illumina paired end sequencing"
          },
          {
            "RF": "paired-end, reads sequenced away from center of fragment <- ->"
          },
          {
            "FF": "paired-end, reads both sequenced in forward orientation"
          },
          {
            "RR": "paired-end, reads both sequenced in reverse orientation"
          },
          {
            "UNKNOWN": "default, portcullis will workaround any calculations requiring orientation information"
          }
        ]
      },
      "details": {
        "label": "orientation",
        "description": "The orientation of the reads that produced the BAM alignments",
        "argument": "--orientation ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "max_length",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "max length",
        "description": "Filter junctions longer than this value.  Default (0) is to not filter based on length.",
        "argument": "--max_length ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "verbose",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "verbose",
        "description": null,
        "argument": "--verbose ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "intron_gff",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "intron GFF",
        "description": "Output intron-based junctions in GFF format.",
        "argument": "--intron_gff ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "save_bad",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "save bad",
        "description": "Saves bad junctions (i.e. junctions that fail the filter), as well as good junctions (those that pass)",
        "argument": "--save bad ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "strandedness",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": "UNKNOWN",
        "enum_values": [
          {
            "unstranded": "Standard Illumina"
          },
          {
            "firststrand": "dUTP, NSR, NNSR"
          },
          {
            "secondstrand": "Ligation, Standard SOLiD, flux sim reads"
          },
          {
            "UNKNOWN": "default, portcullis will workaround any calculations requiring strandedness information"
          }
        ]
      },
      "details": {
        "label": "strandedness",
        "description": "Whether BAM alignments were generated using a type of strand specific RNAseq library",
        "argument": "--strandedness ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    }
  ],
  "outputs": [],
  "_links": {
    "self": {
      "href": "https://agave.iplantc.org/apps/v2/Portcullis-1.0.0u2"
    },
    "executionSystem": {
      "href": "https://agave.iplantc.org/systems/v2/cyverseUK-Batch2"
    },
    "storageSystem": {
      "href": "https://agave.iplantc.org/systems/v2/data.iplantcollaborative.org"
    },
    "history": {
      "href": "https://agave.iplantc.org/apps/v2/Portcullis-1.0.0u2/history"
    },
    "metadata": {
      "href": "https://agave.iplantc.org/meta/v2/data/?q=%7B%22associationIds%22%3A%222065502549470941671-242ac119-0001-005%22%7D"
    },
    "owner": {
      "href": "https://agave.iplantc.org/profiles/v2/rosysnake"
    },
    "permissions": {
      "href": "https://agave.iplantc.org/apps/v2/Portcullis-1.0.0u2/pems"
    }
  }
}
