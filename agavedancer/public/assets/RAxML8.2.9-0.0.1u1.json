{
  "id": "RAxML8.2.9-0.0.1u1",
  "name": "RAxML8.2.9",
  "icon": null,
  "uuid": "168052243140963865-242ac119-0001-005",
  "parallelism": "SERIAL",
  "defaultProcessorsPerNode": 1,
  "defaultMemoryPerNode": 1,
  "defaultNodeCount": 1,
  "defaultMaxRunTime": null,
  "defaultQueue": null,
  "version": "0.0.1",
  "revision": 1,
  "isPublic": true,
  "helpURI": "http://sco.h-its.org/exelixis/web/software/raxml/index.html#documentation",
  "label": "RAxML on CyverseUK",
  "owner": "erikvdbergh",
  "shortDescription": "RAxML v8.2.9",
  "longDescription": "RAxML v8.2.9",
  "tags": [
    "testing",
    "CyVerse UK"
  ],
  "ontology": [],
  "executionType": "CLI",
  "executionSystem": "cyverseUK-Batch2",
  "deploymentPath": "${foundation.service.apps.default.public.dir}/RAxML8.2.9-0.0.1u1.zip",
  "deploymentSystem": "data.iplantcollaborative.org",
  "templatePath": "wrapper.sh",
  "testPath": "test.sh",
  "checkpointable": false,
  "lastModified": "2017-03-23T10:54:26.000-05:00",
  "modules": [],
  "available": true,
  "inputs": [
    {
      "id": "phy_file",
      "value": {
        "validator": null,
        "visible": true,
        "required": true,
        "order": 0,
        "enquote": false,
        "default": "agave://data.iplantcollaborative.org/home/erikvdbergh/testdata/RAxML/testGTR.xml"
      },
      "details": {
        "label": "RAxML XML file (-s)",
        "description": "XML file with sequences and options for RAxML, see CyVerse wiki for examples",
        "argument": "-s ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 1,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "colweight_file",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "Column weight file (-a)",
        "description": "Specify a column weight file name to assign individual weights to each column of the alignment. Those weights must be integers separated by any type and number of white spaces within a separate file.",
        "argument": "-a ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "quartet_group_file (-Y)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "Quartet grouping file",
        "description": "Only works in combination with \"-f q\". See manual for syntax",
        "argument": "-Y ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "bipart_file (-z)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "Multiple tree file for drawing bipartition values",
        "description": "Only works in combination with \"-f g,h,m,n\". Newick format",
        "argument": "-z ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "exclude_file",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "Exclusion file (-E)",
        "description": "Specify a column weight file name to assign individual weights to each  column of the alignment. Those weights must be integers separated by any type and number of white spaces within a separate file.",
        "argument": "-E ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "multi_constraint_tree (-g)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "Multifurcating constraint tree file",
        "description": "specify the file name of a multifurcating constraint tree this tree does not  need to be comprehensive, i.e. must not contain all taxa",
        "argument": "-g ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "aa_submodel_file (-P)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "Custom AA substitution model",
        "description": "This file must contain 420 entries, the first 400 being the AA substitution  rates (this must be a symmetric matrix) and the last 20 are the empirical   base frequencies",
        "argument": "-P ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "mmodel_part_file",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "File with multiple partition substitution models (-q)",
        "description": "see RAxML manual for syntax",
        "argument": "-q ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "binary_tree_file (-r)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "File with binary constraint tree",
        "description": "allows you to pass a binary/bifurcating constraint/backbone tree in NEWICK format",
        "argument": "-r ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "binmodel_file (-R)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "File with binary model parameter from previous RAxML run",
        "description": "binary model parameter file that has previously  been generated with RAxML using the  f e tree evaluation option",
        "argument": "-R ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "secstructure_file (-S)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "File with secondary structure",
        "description": "see manual for details",
        "argument": "-S ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    },
    {
      "id": "starttree_file (-t)",
      "value": {
        "validator": null,
        "visible": true,
        "required": false,
        "order": 0,
        "enquote": false,
        "default": null
      },
      "details": {
        "label": "File with user starting tree",
        "description": "Newick format",
        "argument": "-t ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": [],
        "fileTypes": []
      }
    }
  ],
  "parameters": [
    {
      "id": "model2",
      "value": {
        "visible": true,
        "required": true,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "CAT": "(CAT) Number of categories"
          },
          {
            "CATI": "(CATI) Number of categories (estimate invariable sites)"
          },
          {
            "GAMMA": "(GAMMA) Gamma model of rate heterogeneity"
          },
          {
            "GAMMAI": "(GAMMA) Gamma model of rate heterogeneity (estimate invariable sites)"
          }
        ]
      },
      "details": {
        "label": "Model type (gamma / categories)",
        "description": "Use per-site model of rate heterogeneity (CAT) or Gamma model of rate heterogeneity",
        "argument": " ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 1,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "aut_prot_model",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "ml": "Maximum likelihood (ml)"
          },
          {
            "bic": "Bayesian Information Criterioin (bic)"
          },
          {
            "aic": "Aikake Information Criterion (aic)"
          },
          {
            "aicc": "AIC corrected for small sample sizes (aicc)"
          }
        ]
      },
      "details": {
        "label": "Automatic protein model selection criterion (--auto-prot)",
        "description": "",
        "argument": "--auto-prot=",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "epa_acc_tresh",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Accumulated likelihood weight  threshold for different placements of read (--epa-accumulated-treshold)",
        "description": "see manual for details",
        "argument": "--epa-accumulated-treshold=",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "evo_placement_tresh",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "ML based evolutionary placement algorithm treshold (-G)",
        "description": "specify the file name of a multifurcating constraint tree this tree does not  need to be comprehensive, i.e. must not contain all taxa",
        "argument": "-G ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "no_bfgs",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Disable BFGS method for GTR optimization (--no-bfgs)",
        "description": "disabling BFGS can slow down analysis by 30%",
        "argument": "--no-bfgs ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "k80",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Use K80 for all partitions (--K80)",
        "description": "overrides all other model specifications",
        "argument": "--K80 ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "post_boot",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "autoFC": "(autoFC) frequency based criterion"
          },
          {
            "autoMR": "(autoMR) majority-rule consensus tree criterion"
          },
          {
            "autoMRE": "(autoMRE) extended majority rule consensus tree criterion"
          },
          {
            "autoMRE_IGN": "(autoMRE_IGN) faster autoMRE"
          }
        ]
      },
      "details": {
        "label": "A posteriori bootstopping analysis (-I)",
        "description": "carry out the bootstrap convergence test, that is, the test that determines if you have computed sufficient BS replicates for getting stable support values, a posteriori.",
        "argument": "-I ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "num_rate_categories",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Number   of   distinct   rate   categories (CAT model)",
        "description": null,
        "argument": "-c ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "est_perpart",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Estimate individual per-partition branch lengths (-M)",
        "description": "Only  has effect when used in combination with \"-q\"",
        "argument": "-M ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "intermediate_trees",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Save intermediate tree files (-j)",
        "description": " intermediate tree files shall be written to file during the  standard ML and BS tree searches",
        "argument": "-j ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "random_seed",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Random number seed (-p)",
        "description": "if not given time based seed will be used",
        "argument": "-p ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "rboot_seed",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Rapid bootstrapping seed (-x)",
        "description": "will enable rapid bootstrapping",
        "argument": "-x ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "num_alt_runs",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Number of alternative runs on distinct starting trees (-N)",
        "description": "In combination with the \"-b\" option, this will invoke a multiple bootstrap  analysis",
        "argument": "-N ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "multi_model",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "ORDERED": "ORDERED"
          },
          {
            "MK": "MK"
          },
          {
            "GTR": "GTR"
          }
        ]
      },
      "details": {
        "label": "Specify multi-state substitution model",
        "description": "Compute majority rule consensus tree",
        "argument": "-K ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "model_finaltree",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Estimate final tree (AA alignment only)",
        "description": "using empirical base frequencies",
        "argument": " ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "slid_win_size",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Sliding window size for leave one out site specific placement bias algorithm (-W)",
        "description": "Only   works   with \"-f s\"",
        "argument": "-W ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "algorithm",
      "value": {
        "visible": true,
        "required": true,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": "d",
        "enum_values": [
          {
            "a": "(a) Rapid Bootstrap analysis and search for best scoring ML tree in one program  run"
          },
          {
            "A": "(A) Compute marginal ancestral states on a ROOTED reference tree provided via t"
          },
          {
            "b": "(b) Draw bipartition information on a tree"
          },
          {
            "B": "(B) Optimize br len scaler and other model parameters"
          },
          {
            "c": "(c) Check if the alignment can be properly read by RAxML"
          },
          {
            "C": "(C) Ancestral sequence test"
          },
          {
            "d": "(d) New rapid hill-climbing"
          },
          {
            "D": "(D) New rapid hill-climbing RELL bootstraps"
          },
          {
            "e": "(e) Optimize model parameters+branch lengths"
          },
          {
            "E": "(E) Very fast experimental tree search"
          },
          {
            "F": "(F) Fast experimental tree search"
          },
          {
            "g": "(g) Compute per site log Likelihoods (first tree only)"
          },
          {
            "G": "(G) Compute per site log Likelihoods (each tree)"
          },
          {
            "h": "(h) Compute log likelihood test (SH test) (first tree only)"
          },
          {
            "H": "(H) Compute log likelihood test (SH test) (each tree)"
          },
          {
            "i": "(i) Calculate IC and TC scores"
          },
          {
            "I": "(I) Simple tree rooting algorithm"
          },
          {
            "j": "(j) Generate a bunch (sic) of bootstrapped alignment files"
          },
          {
            "J": "(J) Compute SH like support values"
          },
          {
            "k": "(k) Fix long branch lengths in partitioned data"
          },
          {
            "m": "(m) Compare bipartitions between two bunches of trees"
          },
          {
            "n": "(n) Compute the log likelihood score of all trees (first tree only)"
          },
          {
            "N": "(N) Compute the log likelihood score of all trees (each tree)"
          },
          {
            "o": "(o) Old and slower rapid hill climbing"
          },
          {
            "p": "(p) Pure stepwise MP addition of new sequences"
          },
          {
            "q": "(q) Fast quartet calculator"
          },
          {
            "r": "(r) Compute pairwise Robinson Foulds (RF) distances"
          },
          {
            "R": "(R) Compute pairwise Robinson Foulds (RF) distances (non-weighted)"
          },
          {
            "s": "(s) Split up a multi gene partitioned alignment"
          },
          {
            "S": "(S) Compute site specific placement bias"
          },
          {
            "t": "(t) Randomized tree search"
          },
          {
            "T": "(T) Final thorough optimization of ML tree"
          },
          {
            "u": "(u) Morphological weight calibration using ML"
          },
          {
            "v": "(v) Classify a bunch of environmental sequences into a reference tree"
          },
          {
            "V": "(V) Classify a bunch of environmental sequences into a reference tree"
          },
          {
            "w": "(w) Compute ELW test on a bunch of trees (first tree only)"
          },
          {
            "W": "(W) Compute ELW test on a bunch of trees (each tree)"
          },
          {
            "x": "(x) Compute pair wise ML distances (GTR only)"
          },
          {
            "y": "(y) Classify a bunch of environmental sequences into a reference tree"
          }
        ]
      },
      "details": {
        "label": "Algorithm (-f)",
        "description": "select algorithm",
        "argument": "-f ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 1,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "opt_prec",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Model optimization precision in log likelihood units (-e)",
        "description": null,
        "argument": "-e ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "epa_keep_placement",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Amount of epa placements to keep (--epa-keep-placements)",
        "description": "",
        "argument": "--epa-keep-placements=",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "model_asc",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Correct likelihood for ascertainment bias",
        "description": "You will also need to specify the  correction type via --asc-corr",
        "argument": " ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "mesquite",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Output mesquite compatible files (--mesquite)",
        "description": "",
        "argument": "--mesquite ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "disable_pattern_comp",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Disable pattern compression (-H)",
        "description": "disable pattern compression",
        "argument": "-H ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "asc_corr",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "lewis": "lewis"
          },
          {
            "felsenstein": "felsenstein"
          },
          {
            "stamatakis": "stamatakis"
          }
        ]
      },
      "details": {
        "label": "Ascertainment bias correction type (--asc-corr)",
        "description": "felsenstein and stamatakis require partition file with -q, see manual for details",
        "argument": "--asc-corr=",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "hky85",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Use HKY85 for all partitions (--HKY85)",
        "description": "overrides all other model specifications",
        "argument": "--HKY85 ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "boot_seed",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Bootstrap random seed (-b)",
        "description": null,
        "argument": "-b ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "tcic_verbose",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Enable verbose output for the \"-L\" and \"-f i\" options (-C)",
        "description": null,
        "argument": "-C ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "outgroup",
      "value": {
        "visible": true,
        "required": false,
        "type": "string",
        "order": 0,
        "enquote": false,
        "default": null,
        "validator": null
      },
      "details": {
        "label": "Name of outgroup(s)",
        "description": "single name or comma separated list e.g. Rat,Mouse",
        "argument": "-o ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "maj_consensus",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "MR": "(MR) majority rule consensus"
          },
          {
            "MRE": "(MRE) extended majority rule consensus"
          },
          {
            "STRICT": "(STRICT) strict consensus tree"
          },
          {
            "STRICT_DROP": "(STRICT_DROP) identify dropsets, strict consensus"
          },
          {
            "MR_DROP": "(MR_DROP) identify dropsets, majority rule consensus"
          }
        ]
      },
      "details": {
        "label": "Compute majority rule consensus tree (-J)",
        "description": "Compute majority rule consensus tree",
        "argument": "-J ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "median_gamma",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Use median for GAMMA discrete approximation (-u)",
        "description": "instead of mean",
        "argument": "-u ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "superf_pars",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Only perform superficial parsimony search (-X)",
        "description": "same as -y but less specific",
        "argument": "-X ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "model_aamatrix",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "DAYHOFF": "DAYHOFF"
          },
          {
            "DCMUT": "DCMUT"
          },
          {
            "JTT": "JTT"
          },
          {
            "MTREV": "MTREV"
          },
          {
            "WAG": "WAG"
          },
          {
            "RTREV": "RTREV"
          },
          {
            "CPREV": "CPREV"
          },
          {
            "VT": "VT"
          },
          {
            "BLOSUM62": "BLOSUM62"
          },
          {
            "MTMAM": "MTMAM"
          },
          {
            "LG": "LG"
          },
          {
            "MTART": "MTART"
          },
          {
            "MTZOA": "MTZOA"
          },
          {
            "PMB": "PMB"
          },
          {
            "HIVB": "HIVB"
          },
          {
            "HIVW": "HIVW"
          },
          {
            "JTTDCMUT": "JTTDCMUT"
          },
          {
            "FLU": "FLU"
          },
          {
            "STMTREV": "STMTREV"
          },
          {
            "DUMMY": "DUMMY"
          },
          {
            "DUMMY2": "DUMMY2"
          },
          {
            "AUTO": "AUTO"
          },
          {
            "LG4M": "LG4M"
          },
          {
            "LG4X": "LG4X"
          },
          {
            "PROT_FILE": "PROT_FILE"
          },
          {
            "GTR_UNLINKED": "GTR_UNLINKED"
          },
          {
            "GTR": "GTR"
          }
        ]
      },
      "details": {
        "label": "Protein matrix (AA alignment only)",
        "description": "",
        "argument": " ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "quart_no_replace",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Specify that quartets are randomly subsampled, but without replacement (--quartets-without-replacement)",
        "description": "",
        "argument": "--quartets-without-replacement ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "random_starttree",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Start ML optimization from random starting tree (-d)",
        "description": null,
        "argument": "-d ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "ML_tree_largemem",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "ML tree search without GAMMA (CAT model) (-F)",
        "description": null,
        "argument": "-F ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "model",
      "value": {
        "visible": true,
        "required": true,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "BIN": "Binary (morphological)"
          },
          {
            "GTR": "Nucleotide (GTR)"
          },
          {
            "MULTI": "Multi-state"
          },
          {
            "PROT": "Amino-acid"
          }
        ]
      },
      "details": {
        "label": "Substitution model type",
        "description": "Model   of   Binary   (Morphological),   Nucleotide,   Multi State,   or   Amino   Acid   Substitution",
        "argument": " ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 1,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "epa_prob_tresh",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Percent threshold for including potential placements of a read (--epa-prob-treshold)",
        "description": "see manual for details",
        "argument": "--epa-prob-treshold=",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "noseqcheck",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Disable MSA input checking (--no-seq-check)",
        "description": "check alignment with -f c",
        "argument": "--no-seq-check ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "jc69",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Use JC69 for all partitions (--JC69)",
        "description": "overrides all other model specifications",
        "argument": "--JC69 ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "rearr_topo_changes",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Rearrangement setting for topological changes phase (-i)",
        "description": "Initial rearrangement setting for the subsequent application of topological        changes phase",
        "argument": "-i ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "mrboot_tresh",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "MR bootstopping treshold (-B)",
        "description": null,
        "argument": "-B ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "bootstop_perms",
      "value": {
        "visible": true,
        "required": false,
        "type": "number",
        "order": 0,
        "enquote": false,
        "default": 0,
        "validator": null
      },
      "details": {
        "label": "Number of permutations for the  bootstopping/bootstrap convergence test (--bootstop-perms)",
        "description": "must be 100 at least",
        "argument": "--bootstop-perms=",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "ictc_consensus",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "MR": "(MR) majority rule consensus"
          },
          {
            "MRE": "(MRE) extended majority rule consensus"
          }
        ]
      },
      "details": {
        "label": "Compute consensus tree labeled with IC and TC (-L)",
        "description": "Specifies that bootstrapped trees should be printed with branch lengths",
        "argument": "-L ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "disable_undertermined",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Disable check for 100% undetermined seqs (don't do this) (-O)",
        "description": "Manual: be warned that you really need to know what you are doing when using this option",
        "argument": "-O ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "print_blength",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Print bootstrapped branch lengths (-k)",
        "description": "Specifies that bootstrapped trees should be printed with branch lengths",
        "argument": "-k ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "model_MLestimate",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Specify ML estimate",
        "description": "X suffix",
        "argument": " ",
        "showArgument": false,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "rate_het_disable",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Disable rate heterogeneity (CAT model only) (-V)",
        "description": "Only   works   if   you   specify   the   CAT   model   of   rate   heterogeneity",
        "argument": "-V ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "pars",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Only perform parsimony search (-y)",
        "description": "",
        "argument": "-y ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "print_ident_seqs",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "Don't remove identical sequences from .reduced file (--print-identical-sequences)",
        "description": "",
        "argument": "--print-identical-sequences ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "ml_conv_crit",
      "value": {
        "visible": true,
        "required": false,
        "type": "flag",
        "order": 0,
        "enquote": false,
        "default": false,
        "validator": null
      },
      "details": {
        "label": "ML search convergence criterion (-D)",
        "description": null,
        "argument": "-D ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    },
    {
      "id": "sec_structure_model",
      "value": {
        "visible": true,
        "required": false,
        "type": "enumeration",
        "order": 0,
        "enquote": false,
        "default": null,
        "enum_values": [
          {
            "S6A": "S6A"
          },
          {
            "S6B": "S6B"
          },
          {
            "S6C": "S6C"
          },
          {
            "S6D": "S6D"
          },
          {
            "S6E": "S6E"
          },
          {
            "S7A": "S7A"
          },
          {
            "S7B": "S7B"
          },
          {
            "S7C": "S7C"
          },
          {
            "S7D": "S7D"
          },
          {
            "S7E": "S7E"
          },
          {
            "S7F": "S7F"
          },
          {
            "S16": "S16"
          },
          {
            "S16A": "S16A"
          },
          {
            "S16B": "S16B"
          }
        ]
      },
      "details": {
        "label": "Secondary structure model (-A)",
        "description": "Specify one of the secondary structure substitution models implemented in RAxML",
        "argument": "-A ",
        "showArgument": true,
        "repeatArgument": false
      },
      "semantics": {
        "minCardinality": 0,
        "maxCardinality": 1,
        "ontology": []
      }
    }
  ],
  "outputs": [],
  "_links": {
    "self": {
      "href": "https://agave.iplantc.org/apps/v2/RAxML8.2.9-0.0.1u1"
    },
    "executionSystem": {
      "href": "https://agave.iplantc.org/systems/v2/cyverseUK-Batch2"
    },
    "storageSystem": {
      "href": "https://agave.iplantc.org/systems/v2/data.iplantcollaborative.org"
    },
    "history": {
      "href": "https://agave.iplantc.org/apps/v2/RAxML8.2.9-0.0.1u1/history"
    },
    "metadata": {
      "href": "https://agave.iplantc.org/meta/v2/data/?q=%7B%22associationIds%22%3A%22168052243140963865-242ac119-0001-005%22%7D"
    },
    "owner": {
      "href": "https://agave.iplantc.org/profiles/v2/erikvdbergh"
    },
    "permissions": {
      "href": "https://agave.iplantc.org/apps/v2/RAxML8.2.9-0.0.1u1/pems"
    }
  }
}
